"""Conversation provider for Azure OpenAI with optional web-search context."""  
from __future__ import annotations  
  
from collections.abc import AsyncIterator  
from typing import Any  
  
import logging  
  
from homeassistant.helpers.entity_platform import AddEntitiesCallback  
from homeassistant.components.conversation import AbstractConversationAgent, ConversationInput  
from homeassistant.helpers.entity_platform import AddEntitiesCallback  
from homeassistant.config_entries import ConfigEntry  
from homeassistant.const import CONF_API_KEY  
from homeassistant.core import HomeAssistant  
from homeassistant.helpers.typing import HomeAssistantType  
from openai import AsyncOpenAI  
from .search import WebSearchClient  
  
DOMAIN = "azure_openai_sdk_conversation"  
  
CONF_ENABLE_SEARCH = "enable_web_search"  
CONF_BING_KEY = "bing_api_key"  
CONF_BING_ENDPOINT = "bing_endpoint"  
CONF_BING_MAX = "bing_max_results"  
  
_LOGGER = logging.getLogger(__name__)  
  
  
class AzureOpenAIConversationAgent(AbstractConversationAgent):  
    """Conversation agent that talks to Azure OpenAI; can inject web search."""  
  
    def __init__(self, hass: HomeAssistantType, conf: dict[str, Any]) -> None:  
        super().__init__()  
        self._conf = conf  
        self._client = AsyncOpenAI(  
            api_key=conf[CONF_API_KEY],  
            base_url=f"{conf['endpoint'].rstrip('/')}/openai/deployments/{conf['deployment']}/?api-version=2024-02-01",  
        )  
  
        self._search: WebSearchClient | None = None  
        if conf.get(CONF_ENABLE_SEARCH):  
            self._search = WebSearchClient(  
                api_key=conf[CONF_BING_KEY],  
                endpoint=conf.get(CONF_BING_ENDPOINT, WebSearchClient.BING_ENDPOINT_DEFAULT),  
                max_results=conf.get(CONF_BING_MAX, 5),  
            )  
  
    @property  
    def supported_languages(self) -> list[str]:  
        """Return a list of supported languages."""  
        return ["en", "it"]  # Aggiungi altre lingue se necessario  
  
  
    async def async_process(  
        self,  
        user_input: ConversationInput,  
    ) -> AsyncIterator[str]:  
        """Stream the assistant response."""  
        # Build system/context messages  
        messages: list[dict[str, str]] = [  
            {"role": "system", "content": "You are Home Assistantâ€™s AI helper."}  
        ]  
  
        # 1. (optional) Add web-search results  
        if self._search:  
            query = user_input.text  
            search_md = await self._search.search(query)  
            if search_md:  
                messages.append(  
                    {  
                        "role": "system",  
                        "content": "Real-time web search results:\n\n" + search_md,  
                    }  
                )  
  
        # 2. Add user message  
        messages.append({"role": "user", "content": user_input.text})  
  
        # 3. Call Azure OpenAI & stream  
        stream = await self._client.chat.completions.create(  
            messages=messages,  
            temperature=self._conf.get("temperature", 0.7),  
            max_tokens=self._conf.get("max_tokens", 1024),  
            stream=True,  
        )  
        async for chunk in stream:  
            delta = chunk.choices[0].delta  
            if delta.content:  
                yield delta.content  
  
    async def async_close(self) -> None:  
        """Clean up network clients."""  
        if self._search:  
            await self._search.close()  

async def async_setup_entry(  
    hass: HomeAssistant,  
    config_entry: ConfigEntry,  
) -> None:  
    """Set up the conversation platform for the Azure OpenAI integration."""  
    agent = AzureOpenAIConversationAgent(  
        hass,  
        conf={  
            CONF_API_KEY: config_entry.data[CONF_API_KEY],  
            "endpoint": config_entry.data.get("api_base", ""),  
            "deployment": config_entry.data.get("chat_model", ""),  
            **config_entry.options,  
        },  
    )  
    # Store the agent in hass.data for the conversation component to find
    if "conversation" not in hass.data:
        hass.data["conversation"] = {}
    hass.data["conversation"][config_entry.entry_id] = agent